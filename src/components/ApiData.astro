---
// src/components/ApiData.astro
// Enhanced API Data component with better error handling and retry functionality
---

<div
  id="api-data"
  class="bg-blue-50 p-6 rounded-md border-2 border-blue-300"
  data-api-endpoint="/api/data"
>
  <div class="flex items-center space-x-3">
    <svg
      class="animate-spin h-5 w-5 text-blue-500"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        class="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        stroke-width="4"></circle>
      <path
        class="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
    <span>Loading data...</span>
  </div>
</div>

<script>
  class ApiDataComponent {
    constructor(element) {
      this.element = element;
      this.endpoint = element.dataset.apiEndpoint || "/api/data";
      this.retryCount = 0;
      this.maxRetries = 3;
      this.retryDelay = 2000; // 2 seconds between retries

      this.fetchData();
    }

    async fetchData() {
      try {
        const response = await fetch(this.endpoint);

        // Check if the response is OK
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        // Check content type to ensure it's JSON
        const contentType = response.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          throw new Error(`Expected JSON but got ${contentType}`);
        }

        const data = await response.json();
        this.displayData(data);

        // Reset retry count on success
        this.retryCount = 0;
      } catch (error) {
        console.error("API fetch error:", error);

        if (this.retryCount < this.maxRetries) {
          this.displayRetrying(error);
          this.retryCount++;

          // Retry with exponential backoff
          setTimeout(() => {
            this.fetchData();
          }, this.retryDelay * this.retryCount);
        } else {
          this.displayError(error);
        }
      }
    }

    displayData(data) {
      this.element.innerHTML = `
        <div>
          <h3 class="font-medium text-xl mb-2">API Response:</h3>
          <pre class="bg-gray-800 text-white p-4 rounded-md overflow-x-auto">${JSON.stringify(data, null, 2)}</pre>
          <div class="mt-4">
            <button 
              id="refresh-data"
              class="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors"
            >
              Refresh Data
            </button>
            <button 
              id="copy-data"
              class="ml-3 px-3 py-1 bg-gray-600 text-white text-sm rounded hover:bg-gray-700 transition-colors"
            >
              Copy JSON
            </button>
          </div>
        </div>
      `;

      // Add event listeners
      const refreshBtn = this.element.querySelector("#refresh-data");
      if (refreshBtn) {
        refreshBtn.addEventListener("click", () => this.fetchData());
      }

      const copyBtn = this.element.querySelector("#copy-data");
      if (copyBtn) {
        copyBtn.addEventListener("click", () => this.copyToClipboard(data));
      }
    }

    displayError(error) {
      this.element.innerHTML = `
        <div>
          <div class="text-red-500 mb-4 flex items-start">
            <svg class="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
            </svg>
            <span>Error fetching API data: ${error.message}</span>
          </div>
          <div class="bg-red-50 p-4 rounded-md">
            <h4 class="font-medium mb-2">Troubleshooting:</h4>
            <ul class="list-disc pl-5">
              <li>Ensure the API endpoint at ${this.endpoint} is properly configured</li>
              <li>Check that the endpoint returns valid JSON with proper headers</li>
              <li>Verify CORS settings if accessing from a different domain</li>
            </ul>
            <button 
              id="retry-fetch"
              class="mt-4 px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors flex items-center"
            >
              <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Retry
            </button>
          </div>
        </div>
      `;

      // Add event listener to retry button
      const retryBtn = this.element.querySelector("#retry-fetch");
      if (retryBtn) {
        retryBtn.addEventListener("click", () => {
          this.retryCount = 0; // Reset retry count
          this.fetchData();
        });
      }
    }

    displayRetrying(error) {
      this.element.innerHTML = `
        <div>
          <div class="text-yellow-600 mb-4 flex items-center">
            <svg class="animate-spin h-5 w-5 mr-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span>Error encountered: ${error.message}</span>
          </div>
          <div class="bg-yellow-50 p-4 rounded-md">
            <p class="font-medium">Retrying... (Attempt ${this.retryCount} of ${this.maxRetries})</p>
          </div>
        </div>
      `;
    }

    copyToClipboard(data) {
      const jsonString = JSON.stringify(data, null, 2);

      navigator.clipboard
        .writeText(jsonString)
        .then(() => {
          const copyBtn = this.element.querySelector("#copy-data");
          if (copyBtn) {
            const originalText = copyBtn.textContent;
            copyBtn.textContent = "Copied!";
            copyBtn.classList.remove("bg-gray-600", "hover:bg-gray-700");
            copyBtn.classList.add("bg-green-600", "hover:bg-green-700");

            setTimeout(() => {
              copyBtn.textContent = originalText;
              copyBtn.classList.remove("bg-green-600", "hover:bg-green-700");
              copyBtn.classList.add("bg-gray-600", "hover:bg-gray-700");
            }, 2000);
          }
        })
        .catch((err) => {
          console.error("Failed to copy:", err);
        });
    }
  }

  // Initialize API data components
  document.addEventListener("DOMContentLoaded", () => {
    const apiDataElements = document.querySelectorAll("[data-api-endpoint]");
    apiDataElements.forEach((element) => new ApiDataComponent(element));
  });
</script>
