---
// src/pages/index.astro
import Layout from "../layouts/Layout.astro";

// Check if productId is provided in query parameters
const url = new URL(Astro.request.url);
const urlProductId = url.searchParams.get("productId");

// This is a sample product ID - use the one from the URL or fallback to sample
const SAMPLE_PRODUCT_ID = urlProductId || "12345678";

// Initialize with null - will be populated if a product is found
let product = null;
let error = null;

try {
  // Access the Shopify client through locals (provided by the middleware)
  product = await Astro.locals.shopify.getProductById(SAMPLE_PRODUCT_ID);
} catch (e) {
  error = e instanceof Error ? e.message : "An unknown error occurred";
  console.error(`Error fetching product: ${error}`);
}
---

<Layout title="Shopify Product Viewer">
  <section class="mb-10">
    <h2 class="text-xl font-semibold mb-4">Product Viewer</h2>

    <div class="mb-6 p-4 bg-white rounded-md shadow-sm">
      <form id="product-form" class="flex flex-col md:flex-row gap-4">
        <div class="flex-grow">
          <label
            for="product-id"
            class="block text-sm font-medium text-gray-700 mb-1"
          >
            Product ID
          </label>
          <input
            type="text"
            id="product-id"
            name="product-id"
            value={SAMPLE_PRODUCT_ID}
            class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter Shopify product ID"
          />
        </div>
        <div class="self-end">
          <button
            type="submit"
            class="px-4 py-2 bg-blue-600 text-white rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Load Product
          </button>
        </div>
      </form>
    </div>

    <!-- Product loading indicator (hidden by default) -->
    <div id="loading-indicator" class="hidden">
      <div class="flex justify-center items-center h-64">
        <div
          class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"
        >
        </div>
      </div>
    </div>

    <!-- Error message container (hidden by default) -->
    <div
      id="error-container"
      class="hidden p-4 mb-4 bg-red-50 border-l-4 border-red-500 text-red-700"
    >
      <p class="font-medium">Error loading product</p>
      <p id="error-message"></p>
    </div>

    <div id="product-display">
      {
        error && (
          <div class="p-4 mb-4 bg-red-50 border-l-4 border-red-500 text-red-700">
            <p class="font-medium">Error loading product</p>
            <p>{error}</p>
          </div>
        )
      }

      {
        product && (
          <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <div class="md:flex">
              <div class="md:w-1/3 p-4">
                {product.image ? (
                  <img
                    id="main-product-image"
                    src={product.image}
                    alt={product.title}
                    class="w-full h-auto object-cover rounded-md"
                  />
                ) : (
                  <div class="w-full h-64 bg-gray-200 rounded-md flex items-center justify-center">
                    <span class="text-gray-500">No image available</span>
                  </div>
                )}

                {product.images.length > 1 && (
                  <div
                    class="mt-4 grid grid-cols-4 gap-2"
                    id="thumbnail-container"
                  >
                    {product.images.slice(0, 4).map((imgUrl) => (
                      <img
                        src={imgUrl}
                        alt={product.title}
                        class="w-full h-16 object-cover rounded-md cursor-pointer hover:opacity-80 thumbnail-img"
                        data-full-img={imgUrl}
                      />
                    ))}
                  </div>
                )}
              </div>

              <div class="md:w-2/3 p-6">
                <h1 class="text-2xl font-bold text-gray-900 mb-2">
                  {product.title}
                </h1>

                <div class="flex items-baseline mb-4">
                  <span class="text-xl font-semibold text-gray-900">
                    ${parseFloat(product.price).toFixed(2)}
                  </span>

                  {product.compareAtPrice && (
                    <span class="ml-2 text-sm text-gray-500 line-through">
                      ${parseFloat(product.compareAtPrice).toFixed(2)}
                    </span>
                  )}

                  {product.compareAtPrice && (
                    <span class="ml-2 px-2 py-1 text-xs font-semibold text-white bg-red-500 rounded-full">
                      Sale
                    </span>
                  )}
                </div>

                <div class="mb-6">
                  <p
                    class="text-sm text-gray-700"
                    set:html={product.description}
                  />
                </div>

                {product.variants.length > 1 && (
                  <div class="mb-6">
                    <label
                      for="variant-select"
                      class="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Options
                    </label>
                    <select
                      id="variant-select"
                      class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                    >
                      {product.variants.map((variant) => (
                        <option
                          value={variant.id}
                          disabled={!variant.available}
                        >
                          {variant.title} - $
                          {parseFloat(variant.price).toFixed(2)}
                          {!variant.available && " (Sold out)"}
                        </option>
                      ))}
                    </select>
                  </div>
                )}

                <div class="flex items-center space-x-4">
                  <span
                    class={`px-2 py-1 text-xs font-semibold rounded-full ${product.available ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}
                  >
                    {product.available ? "In stock" : "Out of stock"}
                  </span>

                  {product.variants[0]?.sku && (
                    <span class="text-xs text-gray-500">
                      SKU: {product.variants[0].sku}
                    </span>
                  )}
                </div>

                <div class="mt-6">
                  <button
                    class={`w-full px-6 py-3 text-white font-medium rounded-md shadow-sm ${
                      product.available
                        ? "bg-blue-600 hover:bg-blue-700 focus:ring-blue-500"
                        : "bg-gray-400 cursor-not-allowed"
                    }`}
                    disabled={!product.available}
                  >
                    {product.available ? "Add to Cart" : "Sold Out"}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )
      }
    </div>
  </section>

  <script>
    // Client-side JavaScript to handle the product loading and image gallery
    document.addEventListener("DOMContentLoaded", () => {
      const form = document.getElementById("product-form");
      const productDisplay = document.getElementById("product-display");
      const loadingIndicator = document.getElementById("loading-indicator");
      const errorContainer = document.getElementById("error-container");
      const errorMessage = document.getElementById("error-message");

      if (
        !form ||
        !productDisplay ||
        !loadingIndicator ||
        !errorContainer ||
        !errorMessage
      ) {
        console.error("Required DOM elements not found");
        return;
      }

      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const productIdInput = document.getElementById(
          "product-id"
        ) as HTMLInputElement | null;
        if (!productIdInput) {
          console.error("Product ID input not found");
          return;
        }

        const productId = productIdInput.value.trim();

        if (!productId) {
          alert("Please enter a product ID");
          return;
        }

        // Hide product display and show loading indicator
        productDisplay.classList.add("hidden");
        errorContainer.classList.add("hidden");
        loadingIndicator.classList.remove("hidden");

        try {
          // Fetch product from our API endpoint
          const response = await fetch(`/api/shopify/products/${productId}`);

          // Parse response as JSON, handling potential errors
          const data = await response.json();

          if (!response.ok) {
            // Type assertion for the error data
            const errorData = data as { message?: string };
            throw new Error(errorData.message || "Failed to load product");
          }

          // Redirect to refresh the page with the new product
          window.location.href = `/?productId=${productId}`;
        } catch (error) {
          // Show error message
          loadingIndicator.classList.add("hidden");
          errorContainer.classList.remove("hidden");

          if (error instanceof Error) {
            errorMessage.textContent = error.message;
          } else {
            errorMessage.textContent = "An unknown error occurred";
          }
        }
      });

      // Handle thumbnail image clicks using event delegation
      const thumbnailContainer = document.getElementById("thumbnail-container");
      if (thumbnailContainer) {
        thumbnailContainer.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;

          // Check if the clicked element is a thumbnail image
          if (target.classList.contains("thumbnail-img")) {
            const fullImage = target.getAttribute("data-full-img");
            const mainImage = document.getElementById(
              "main-product-image"
            ) as HTMLImageElement | null;

            if (fullImage && mainImage) {
              mainImage.src = fullImage;
            }
          }
        });
      }
    });
  </script>
</Layout>
