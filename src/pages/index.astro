---
import Layout from "../layouts/Layout.astro";
import Counter from "../components/Counter";
---

<Layout title="Astro on Cloudflare">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold text-center text-purple-800 mb-8">
      Welcome to <span class="text-gradient">Astro</span> on Cloudflare
    </h1>

    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-2xl font-semibold mb-4">
        Server-rendered Astro Component
      </h2>
      <p class="text-gray-700 mb-4">
        This text is rendered on the server during build time. Astro components
        are server-side by default and ship zero JavaScript to the client.
      </p>
      <div class="bg-gray-100 p-4 rounded-md">
        <code class="text-sm"
          >Server-rendered at {new Date().toISOString()}</code
        >
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-2xl font-semibold mb-4">React Island Component</h2>
      <p class="text-gray-700 mb-4">
        This counter is a React component running on the client. It's an
        "island" of interactivity in a sea of static HTML.
      </p>
      <div class="bg-yellow-50 p-6 rounded-md border-2 border-yellow-300">
        <Counter client:load />
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md">
      <h2 class="text-2xl font-semibold mb-4">API Integration</h2>
      <p class="text-gray-700 mb-4">
        This data is fetched from our Cloudflare Worker API endpoint:
      </p>
      <div
        id="api-data"
        class="bg-blue-50 p-6 rounded-md border-2 border-blue-300"
      >
        Loading data...
      </div>
    </div>
  </main>
</Layout>

<script>
  // Improved client-side script to fetch data from our API
  async function fetchApiData() {
    try {
      const response = await fetch("/api/data");

      // Check if the response is OK
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      // Check content type to ensure it's JSON
      const contentType = response.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        throw new Error(`Expected JSON but got ${contentType}`);
      }

      const data = await response.json();

      document.getElementById("api-data").innerHTML = `
        <h3 class="font-medium text-xl mb-2">API Response:</h3>
        <pre class="bg-gray-800 text-white p-4 rounded-md overflow-x-auto">${JSON.stringify(data, null, 2)}</pre>
      `;
    } catch (error) {
      console.error("API fetch error:", error);
      document.getElementById("api-data").innerHTML = `
        <div class="text-red-500 mb-4">Error fetching API data: ${error.message}</div>
        <div class="bg-red-50 p-4 rounded-md">
          <h4 class="font-medium mb-2">Troubleshooting:</h4>
          <ul class="list-disc pl-5">
            <li>Ensure the API endpoint at /api/data is properly configured</li>
            <li>Check that the endpoint returns valid JSON with proper headers</li>
            <li>Verify CORS settings if accessing from a different domain</li>
          </ul>
        </div>
      `;
    }
  }

  // Run when the page loads
  document.addEventListener("DOMContentLoaded", fetchApiData);
</script>

<style>
  .text-gradient {
    background-image: linear-gradient(45deg, #4f46e5, #7e22ce);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
</style>
