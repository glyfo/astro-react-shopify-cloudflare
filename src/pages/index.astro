---
import Layout from "../layouts/Layout.astro";
import Counter from "../components/Counter";
import FeaturedProducts from "../components/shopify/FeaturedProducts.astro";
import ShopifyCart from "../components/shopify/ShopifyCart";
import ProductSearch from "../components/shopify/ProductSearch";
import ApiData from "../components/ApiData.astro";
---

<Layout title="Astro on Cloudflare with Shopify">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold text-center text-purple-800 mb-8">
      Welcome to <span class="text-gradient">Astro</span> on Cloudflare with <span
        class="shopify-gradient">Shopify</span
      >
    </h1>

    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-2xl font-semibold mb-4">
        Server-rendered Astro Component
      </h2>
      <p class="text-gray-700 mb-4">
        This text is rendered on the server during build time. Astro components
        are server-side by default and ship zero JavaScript to the client.
      </p>
      <div class="bg-gray-100 p-4 rounded-md">
        <code class="text-sm"
          >Server-rendered at {new Date().toISOString()}</code
        >
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-2xl font-semibold mb-4">React Island Component</h2>
      <p class="text-gray-700 mb-4">
        This counter is a React component running on the client. It's an
        "island" of interactivity in a sea of static HTML.
      </p>
      <div class="bg-yellow-50 p-6 rounded-md border-2 border-yellow-300">
        <Counter client:load />
      </div>
    </div>

    <!-- Shopify Featured Products Section -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-2xl font-semibold mb-4">Featured Products</h2>
      <p class="text-gray-700 mb-4">
        These products are fetched from your connected Shopify store using the
        Shopify Storefront API.
      </p>
      <FeaturedProducts />
    </div>

    <!-- Shopify Cart Component -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-2xl font-semibold mb-4">Shopping Cart</h2>
      <p class="text-gray-700 mb-4">
        This interactive cart component manages your Shopify shopping session.
      </p>
      <div class="bg-green-50 p-6 rounded-md border-2 border-green-300">
        <ShopifyCart client:load />
      </div>
    </div>

    <!-- Product Search Component -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-2xl font-semibold mb-4">Product Search</h2>
      <p class="text-gray-700 mb-4">
        Search products in your Shopify store with real-time results.
      </p>
      <div class="bg-indigo-50 p-6 rounded-md border-2 border-indigo-300">
        <ProductSearch client:load />
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md">
      <h2 class="text-2xl font-semibold mb-4">API Integration</h2>
      <p class="text-gray-700 mb-4">
        This data is fetched from our Cloudflare Worker API endpoint:
      </p>
      <ApiData />
    </div>
  </main>
</Layout>
<script>
  // Initialize Shopify components with enhanced error handling, logging, and UX
  (function () {
    const CONFIG = {
      MAX_RETRY_ATTEMPTS: 3,
      BASE_RETRY_DELAY: 500, // milliseconds
      EXPONENTIAL_BACKOFF: true, // Enable exponential backoff for retries
      DEBUG_MODE: false, // Set to true to enable verbose logging
      ELEMENT_SELECTOR: "shopping-cart",
      CART_BUTTON_SELECTOR: ".cart-toggle", // Optional selector for cart toggle buttons
    };

    let retryCount = 0;
    let isInitialized = false;

    // Logging utility that respects debug mode
    const logger = {
      log: (msg) => CONFIG.DEBUG_MODE && console.log(`[Shopify] ${msg}`),
      info: (msg) => console.info(`[Shopify] ${msg}`),
      warn: (msg) => console.warn(`[Shopify] ${msg}`),
      error: (msg, err) => console.error(`[Shopify] ${msg}`, err || ""),
    };

    // Calculate delay with optional exponential backoff
    function getRetryDelay(attempt) {
      return CONFIG.EXPONENTIAL_BACKOFF
        ? CONFIG.BASE_RETRY_DELAY * Math.pow(2, attempt - 1)
        : CONFIG.BASE_RETRY_DELAY;
    }

    // Event handler for cart updates
    function handleCartUpdate(event) {
      logger.log("Cart updated event received");

      // Refresh cart UI if available
      if (window.ShopifyComponents?.refreshCart) {
        window.ShopifyComponents.refreshCart();
      }

      // Update any cart counters in the UI
      updateCartCounters();
    }

    // Update cart count indicators in the UI
    function updateCartCounters() {
      try {
        const cartCount = window.ShopifyComponents?.getCartCount?.() || 0;
        const counters = document.querySelectorAll(".cart-count");

        counters.forEach((counter) => {
          counter.textContent = cartCount.toString();
          counter.classList.toggle("hidden", cartCount === 0);
        });
      } catch (err) {
        logger.error("Failed to update cart counters", err);
      }
    }

    // More robust initialization with retries
    function initShopifyComponents() {
      try {
        // Prevent duplicate initialization
        if (isInitialized) {
          logger.log("Shopify components already initialized");
          return;
        }

        const shopifyCartEl = document.querySelector(CONFIG.ELEMENT_SELECTOR);

        // Check if Shopify components are available
        if (!shopifyCartEl || typeof window.ShopifyComponents === "undefined") {
          if (retryCount < CONFIG.MAX_RETRY_ATTEMPTS) {
            retryCount++;
            const delay = getRetryDelay(retryCount);

            logger.log(
              `Components not ready, retrying (${retryCount}/${CONFIG.MAX_RETRY_ATTEMPTS}) in ${delay}ms...`
            );
            setTimeout(initShopifyComponents, delay);
            return;
          } else {
            logger.warn(
              `Failed to initialize after ${CONFIG.MAX_RETRY_ATTEMPTS} attempts`
            );

            // Show fallback UI if available
            const fallbackEls = document.querySelectorAll(".cart-fallback");
            fallbackEls.forEach((el) => el.classList.remove("hidden"));

            return;
          }
        }

        // Initialize cart if the function exists
        if (typeof window.ShopifyComponents?.initCart === "function") {
          logger.log("Initializing Shopify cart...");

          // Initialize the cart
          window.ShopifyComponents.initCart();
          isInitialized = true;

          // Set up event listeners for cart updates
          window.addEventListener("product:added-to-cart", handleCartUpdate);
          window.addEventListener("cart:updated", handleCartUpdate);

          // Initialize any cart toggle buttons
          initCartToggles();

          // Update cart counters initially
          updateCartCounters();

          logger.info("Cart initialized successfully");
        } else {
          logger.warn("initCart method not found on ShopifyComponents");
        }
      } catch (error) {
        logger.error("Error initializing components:", error);

        // Retry on unexpected errors
        if (retryCount < CONFIG.MAX_RETRY_ATTEMPTS) {
          retryCount++;
          setTimeout(initShopifyComponents, getRetryDelay(retryCount));
        }
      }
    }

    // Initialize cart toggle buttons
    function initCartToggles() {
      try {
        const toggleButtons = document.querySelectorAll(
          CONFIG.CART_BUTTON_SELECTOR
        );

        toggleButtons.forEach((button) => {
          button.addEventListener("click", () => {
            if (window.ShopifyComponents?.toggleCart) {
              window.ShopifyComponents.toggleCart();
            }
          });

          // Enable buttons now that cart is ready
          button.disabled = false;
          button.setAttribute("aria-disabled", "false");
        });
      } catch (err) {
        logger.error("Failed to initialize cart toggles", err);
      }
    }

    // Cleanup function
    function cleanup() {
      window.removeEventListener("product:added-to-cart", handleCartUpdate);
      window.removeEventListener("cart:updated", handleCartUpdate);
    }

    // Register cleanup on page unload
    window.addEventListener("beforeunload", cleanup);

    // Initialize based on document ready state
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initShopifyComponents);
    } else {
      // DOM already loaded, initialize immediately
      initShopifyComponents();
    }
  })();
</script>
<style>
  /* TailwindCSS already provides gradient utilities like bg-gradient-to-r from-blue-500 to-purple-600 */
  /* We'll only keep these custom styles for the specific branded gradients */
  .text-gradient {
    @apply bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 to-purple-800;
  }

  .shopify-gradient {
    @apply bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-green-700;
  }
</style>
